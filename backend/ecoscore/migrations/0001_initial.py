# Generated by Django 4.2.7 on 2025-09-20 10:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('merchants', '0003_merchantproduct_ecoscore_calculation_version_and_more'),
        ('products', '0002_product_ecoscore_calculation_version_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='EcoInventProcess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(max_length=100)),
                ('subcategory', models.CharField(blank=True, max_length=100)),
                ('unit', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('location', models.CharField(default='GLO', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Ecoinvent Process',
                'verbose_name_plural': 'Ecoinvent Processes',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EcoScoreBenchmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=100, unique=True)),
                ('subcategory', models.CharField(blank=True, max_length=100)),
                ('benchmark_impact', models.FloatField(help_text='Benchmark impact value for normalization')),
                ('benchmark_unit', models.CharField(help_text='Unit of the benchmark', max_length=50)),
                ('description', models.TextField(blank=True)),
                ('source', models.CharField(help_text='Source of the benchmark data', max_length=200)),
                ('score_a_min', models.FloatField(default=80.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('score_b_min', models.FloatField(default=60.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('score_c_min', models.FloatField(default=40.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('score_d_min', models.FloatField(default=20.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'subcategory'],
            },
        ),
        migrations.CreateModel(
            name='EcoScoreHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_score', models.FloatField(blank=True, null=True)),
                ('new_score', models.FloatField()),
                ('old_grade', models.CharField(blank=True, choices=[('A', 'A - Highly Sustainable'), ('B', 'B - Good'), ('C', 'C - Average'), ('D', 'D - Poor'), ('E', 'E - Very Poor')], max_length=1)),
                ('new_grade', models.CharField(choices=[('A', 'A - Highly Sustainable'), ('B', 'B - Good'), ('C', 'C - Average'), ('D', 'D - Poor'), ('E', 'E - Very Poor')], max_length=1)),
                ('change_reason', models.CharField(help_text='Reason for the score change', max_length=200)),
                ('change_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('merchant_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ecoscore_history', to='merchants.merchantproduct')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ecoscore_history', to='products.product')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserEcoAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(choices=[('green_shopper', 'Green Shopper'), ('eco_champion', 'Eco Champion'), ('sustainability_leader', 'Sustainability Leader'), ('carbon_reducer', 'Carbon Reducer'), ('eco_explorer', 'Eco Explorer')], max_length=50)),
                ('achievement_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('eco_score_threshold', models.FloatField(help_text='Minimum EcoScore threshold for this achievement')),
                ('purchase_count_threshold', models.PositiveIntegerField(help_text='Minimum number of qualifying purchases')),
                ('total_co2_saved', models.FloatField(default=0.0, help_text='Total CO2 saved through eco-friendly purchases')),
                ('is_earned', models.BooleanField(default=False)),
                ('earned_at', models.DateTimeField(blank=True, null=True)),
                ('badge_icon', models.CharField(default='ðŸŒ±', max_length=50)),
                ('badge_color', models.CharField(default='#4CAF50', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eco_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at', '-created_at'],
                'unique_together': {('user', 'achievement_type')},
            },
        ),
        migrations.CreateModel(
            name='ProductEcoMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mapping_confidence', models.FloatField(help_text='Confidence level of the mapping (0.0 to 1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('mapping_notes', models.TextField(blank=True, help_text='Notes about the mapping decision')),
                ('functional_unit', models.CharField(help_text="e.g., 'per kg', 'per item', 'per use'", max_length=100)),
                ('functional_unit_value', models.FloatField(help_text='Value of the functional unit')),
                ('manual_impact_override', models.FloatField(blank=True, help_text='Manual override for impact value', null=True)),
                ('is_manual_override', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ecoinvent_process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_mappings', to='ecoscore.ecoinventprocess')),
                ('merchant_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eco_mappings', to='merchants.merchantproduct')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='eco_mappings', to='products.product')),
            ],
            options={
                'unique_together': {('merchant_product', 'ecoinvent_process'), ('product', 'ecoinvent_process')},
            },
        ),
        migrations.CreateModel(
            name='EcoScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_value', models.FloatField(help_text='EcoScore value (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('score_grade', models.CharField(choices=[('A', 'A - Highly Sustainable'), ('B', 'B - Good'), ('C', 'C - Average'), ('D', 'D - Poor'), ('E', 'E - Very Poor')], max_length=1)),
                ('raw_impact', models.FloatField(help_text='Raw environmental impact value')),
                ('impact_unit', models.CharField(help_text='Unit of the impact value', max_length=50)),
                ('normalized_impact', models.FloatField(help_text='Normalized impact value')),
                ('lca_method', models.CharField(default='IPCC 2013 - climate change - GWP 100a', max_length=100)),
                ('calculation_date', models.DateTimeField(auto_now_add=True)),
                ('calculation_version', models.CharField(default='1.0', max_length=50)),
                ('is_manual_override', models.BooleanField(default=False)),
                ('calculation_notes', models.TextField(blank=True)),
                ('benchmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ecoscores', to='ecoscore.ecoscorebenchmark')),
                ('ecoinvent_process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ecoscores', to='ecoscore.ecoinventprocess')),
                ('merchant_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ecoscores', to='merchants.merchantproduct')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ecoscores', to='products.product')),
            ],
            options={
                'ordering': ['-calculation_date'],
                'unique_together': {('merchant_product', 'calculation_version'), ('product', 'calculation_version')},
            },
        ),
    ]
